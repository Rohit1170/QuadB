// Given a binary tree, implement a function that returns the maximum depth 
// of the tree.

struct TreeNode{
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x):val(x),left(NULL),right(NULL){}
};
int maxDepth(TreeNode* root){
    if(root==NULL)
    return 0;
    
    int leftDe=maxDepth(root->left);
    int rightDe=maxDepth(root->right);
    
    return 1+max(leftDe,rightDe);
}

int main(){
    TreeNode* root=new TreeNode(3);
    root->left=new TreeNode(9);
    root->right=new TreeNode(20);
    root->right->left=new TreeNode(15);
    root->right->right=new TreeNode(7);
    
    cout<<"max depth: "<<maxDepth(root)<<endl;
    
    return 0;
}


//Rust Program
struct TreeNode{
    val:i32,
    left:Option<Box<TreeNode>>,
    right:Option<Box<TreeNode>>,
}
impl TreeNode{
    fn new(val:i32)->Self{
        TreeNode{val,left:Node,right:None}
    }
}
fn maxDepth(root:&Option<Box<TreeNode>>)->i32{
    match root{
        None=>0,
        Some(node)=>{
            let leftDe=maxDepth(&node.left);
            let rightDe=maxDepth(&node.right);
            1+cmp::max(leftDe,rightDe)
        }
    }
}
fn main() {
    let mut root=Some(Box::new(TreeNode::new(3)));
    root.as_mut().unwrap().left=Some(Box::new(TreeNode::new(9)));
    root.as_mut().unwrap().right=Some(Box::new(TreeNode::new(20)));
    root.as_mut().unwrap().right.as_mut().unwrap().left=Some(Box::new(TreeNode::new(15)));
    root.as_mut().unwrap().right.as_mut().unwrap().right=Some(Box::new(TreeNode::new(7)));

    println!("Max Depth: {}", maxDepth(&root));
}
